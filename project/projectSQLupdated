-- createTables.sql (DDL statements to create tables with additional features):
-- Create Phone table with PRIMARY KEY
CREATE TABLE Phone (
  modelNumber TEXT PRIMARY KEY,
  modelName TEXT,
  IMEI TEXT CHECK (IMEI LIKE '___________[0-9]'),
  FOREIGN KEY (modelNumber, modelName) REFERENCES PhoneModel (modelNumber, modelName)
);

-- Create PhoneModel table with PRIMARY KEY
CREATE TABLE PhoneModel (
  modelNumber TEXT PRIMARY KEY,
  modelName TEXT,
  storage INTEGER,
  colour TEXT,
  baseCost REAL,
  dailyCost REAL
);

-- createTrigger.sql (Trigger to calculate rentalCost when dateBack is updated):
-- Create a trigger to calculate rentalCost when dateBack is updated
CREATE TRIGGER calculateRentalCost
AFTER UPDATE ON rentalContract
FOR EACH ROW
WHEN OLD.dateBack IS NULL AND NEW.dateBack IS NOT NULL
BEGIN
  UPDATE rentalContract
  SET rentalCost = (julianday(NEW.dateBack) - julianday(OLD.dateOut) + 1) * (
    SELECT dailyCost
    FROM PhoneModel
    WHERE (PhoneModel.modelNumber, PhoneModel.modelName) = (
      SELECT modelNumber, modelName
      FROM Phone
      WHERE Phone.IMEI = NEW.IMEI
    )
  )
  WHERE rowid = NEW.rowid;
END;

-- createView.sql (View to summarize rentals for tax purposes):
-- Create a view CustomerSummary for tax year summary
CREATE VIEW CustomerSummary AS
SELECT
  r.customerId,
  p.modelName,
  CAST((julianday(r.dateBack) - julianday(r.dateOut) + 1) AS INTEGER) AS daysRented,
  CASE
    WHEN strftime('%m-%d', r.dateOut) >= '07-01' AND strftime('%m-%d', r.dateBack) <= '06-30' THEN strftime('%Y', r.dateOut) || '/' || strftime('%y', r.dateBack)
    WHEN strftime('%m-%d', r.dateOut) >= '07-01' THEN strftime('%Y', r.dateOut) || '/' || (strftime('%y', r.dateOut) + 1)
    ELSE strftime('%Y', r.dateOut) || '/' || strftime('%y', r.dateOut)
  END AS taxYear,
  r.rentalCost
FROM rentalContract r
INNER JOIN Phone p ON r.IMEI = p.IMEI
WHERE r.dateBack IS NOT NULL;
