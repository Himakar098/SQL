-- 2. Create a trigger to calculate rentalCost
CREATE TRIGGER IF NOT EXISTS CalculateRentalCost
AFTER UPDATE OF dateBack ON rentalContract
BEGIN
  -- Check if the update was done by the clerk
  IF NEW.dateBack IS NOT NULL THEN
    -- Calculate the rental cost
    UPDATE rentalContract
    SET rentalCost = (julianday(NEW.dateBack) - julianday(OLD.dateOut) + 1) * 
                     (SELECT dailyCost FROM PhoneModel WHERE modelNumber = 
                     (SELECT modelNumber FROM Phone WHERE IMEI = NEW.IMEI))
    WHERE rowid = NEW.rowid;
  END IF;
END;

-- 3. Create a view to summarize rental information for tax purposes
CREATE VIEW IF NOT EXISTS CustomerSummary AS
SELECT rc.customerId, pm.modelNumber, 
       CAST(julianday(rc.dateBack) - julianday(rc.dateOut) + 1 AS INTEGER) AS daysRented,
       CASE
         WHEN strftime('%m', rc.dateBack) >= '07' THEN strftime('%Y', rc.dateBack) || '/' || 
                                                      strftime('%Y', rc.dateBack, '+1 year')
         ELSE strftime('%Y', rc.dateBack, '-1 year') || '/' || strftime('%Y', rc.dateBack)
       END AS taxYear,
       (julianday(rc.dateBack) - julianday(rc.dateOut) + 1) * 
       (SELECT dailyCost FROM PhoneModel WHERE modelNumber = 
       (SELECT modelNumber FROM Phone WHERE IMEI = rc.IMEI)) AS rentalCost
FROM rentalContract rc
INNER JOIN Phone p ON rc.IMEI = p.IMEI
INNER JOIN PhoneModel pm ON p.modelNumber = pm.modelNumber
WHERE rc.dateBack IS NOT NULL;
